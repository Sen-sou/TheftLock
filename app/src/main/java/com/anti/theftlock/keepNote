package com.anti.theftlock;

import android.Manifest;
import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothManager;
import android.bluetooth.BluetoothProfile;
import android.bluetooth.BluetoothSocket;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageManager;
import android.media.AudioManager;
import android.media.MediaPlayer;
import android.os.Bundle;
import android.os.ParcelUuid;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import androidx.activity.EdgeToEdge;
import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.core.graphics.Insets;
import androidx.core.view.ViewCompat;
import androidx.core.view.WindowInsetsCompat;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.reflect.Method;
import java.net.ConnectException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Set;
import java.util.UUID;

public class MainActivity extends AppCompatActivity {

    private BluetoothManager bluetoothManager = null;
    private BluetoothAdapter bluetoothAdapter = null;
    private BluetoothDevice connectedDevice;
    BluetoothSocket bluetoothSocket = null;
    private final int PERMISSION_REQUEST_CODE = 1001;
    private final int REQUEST_ENABLE_BT = 1;
    private String TAG = "BluetoothService";
    private Button button;
    private Button disconnectButton;
    private Button connectButton;
    private TextView textView;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        EdgeToEdge.enable(this);
        setContentView(R.layout.activity_main);

        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -> {
            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);
            return insets;
        });

        button = findViewById(R.id.Button1);
        try {
            button.setOnClickListener(v -> {
                bluetoothAdapter.startDiscovery();
            });
        } catch (SecurityException e) {
            Log.e(TAG, "onCreate: " + e.getMessage());
        }

        disconnectButton = findViewById(R.id.Button2);
        connectButton = findViewById(R.id.Button3);
        try {
            disconnectButton.setOnClickListener(v -> {

                bluetoothAdapter.getProfileProxy(getApplicationContext(), new BluetoothProfile.ServiceListener() {
                    @Override
                    public void onServiceConnected(int profile, BluetoothProfile proxy) {
                        Log.d(TAG, "onServiceConnected: " + proxy);
                        if (profile == BluetoothProfile.A2DP) {
                            if (proxy.getConnectedDevices().contains(connectedDevice)) {
                                try {
                                    Method disconnectMethod = proxy.getClass().getMethod("disconnect", BluetoothDevice.class);
                                    disconnectMethod.invoke(proxy, connectedDevice);
                                    Log.d(TAG, "Disconnected device: " + connectedDevice.getName());
                                } catch (Exception e) {
                                    Log.e(TAG, "Failed to disconnect device", e);
                                }
                            }
                        }
                    }

                    @Override
                    public void onServiceDisconnected(int profile) {
                        // Handle service disconnection if necessary
                    }
                }, BluetoothProfile.A2DP);

                try {
                    Method removeBond = connectedDevice.getClass().getMethod("removeBond");
                    boolean result = (boolean) removeBond.invoke(connectedDevice);
                    if (result) {
                        Log.d(TAG, "Device unpaired successfully: " + connectedDevice.getName());
                    } else {
                        Log.d(TAG, "Failed to unpair device");
                    }
                } catch (Exception e) {
                    Log.e(TAG, "Error unpairing device", e);
                }

            });

            connectButton.setOnClickListener(v -> {
                BluetoothDevice RFdevice = bluetoothAdapter.getRemoteDevice(connectedDevice.getAddress()); // Replace with the device MAC address
                BluetoothSocket socket = null;
//                UUID uuid = UUID.fromString("00001101-0000-1000-8000-00805f9b34fb"); // RFCOMM SPP UUID (this is an example UUID)
                UUID uuid = UUID.fromString("00001101-0000-1000-8000-00805f9b34fb");

                try {
                    socket = RFdevice.createRfcommSocketToServiceRecord(uuid);
                    socket.connect(); // Connect to the device
                    Log.d(TAG, "Connected to device: " + RFdevice.getName());
                } catch (IOException e) {
                    Log.e(TAG, "Failed to connect to device", e);
                } finally {
                    if (socket != null && socket.isConnected()) {
                        try {
                            socket.close();  // Close the socket when done
                        } catch (IOException e) {
                            Log.e(TAG, "Failed to close socket", e);
                        }
                    }
                }
            });


        } catch (SecurityException e) {
            Log.e(TAG, "onCreate: " + e.getMessage());
        }

        textView = findViewById(R.id.textview1);


        bluetoothManager = (BluetoothManager) this.getSystemService(BLUETOOTH_SERVICE);
        bluetoothAdapter = bluetoothManager.getAdapter();

        if (bluetoothAdapter == null) {
            Log.e(TAG, "Bluetooth not supported on this device");
        }

        IntentFilter filter = new IntentFilter(BluetoothDevice.ACTION_FOUND);
        registerReceiver(broadcastReceiver, filter);


        chkReqBtPerm();
    }

    private void chkReqBtPerm() {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_SCAN) != PackageManager.PERMISSION_GRANTED
            || ContextCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_CONNECT) != PackageManager.PERMISSION_GRANTED) {
            Log.d(TAG, "Requesting Permissions");
            requestPermissions(
                    new String[] {
                            Manifest.permission.BLUETOOTH_SCAN,
                            Manifest.permission.BLUETOOTH_CONNECT
                    },
                    PERMISSION_REQUEST_CODE
            );
        } else {
            enableBluetooth();
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == PERMISSION_REQUEST_CODE) {
            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                enableBluetooth();
            } else {
                Log.e("Bluetooth", "Permissions denied");
            }
        }
    }

    private void enableBluetooth() {
        Log.d(TAG, "enableBluetooth: ");
        if (!bluetoothAdapter.isEnabled()) {
            Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
            try {
                startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT); // TODO: use approved methods, need onResult override
            } catch (SecurityException e) {
                Log.e(TAG, "Permissions not found");
            }
        } else {
            discoverDevices();
        }
    }

    private void discoverDevices() {
        // Get paired devices
        try {
            Set<BluetoothDevice> pairedDevices = bluetoothAdapter.getBondedDevices();
            if (!pairedDevices.isEmpty()) {
                for (BluetoothDevice device : pairedDevices) {
                    Log.d(TAG, "Paired device: " + device.getName() + " - " + device.getAddress());
                    for (ParcelUuid uuid : device.getUuids()) {
                        Log.d(TAG, String.valueOf(uuid.getUuid()));
                    }
                    if (device.getName().equals("Airdopes 121 PRO") && device.getAddress().equals("46:CF:EC:41:82:8C")) {
                        connectedDevice = device;
                    }
                }
            }
        } catch (SecurityException e) {
            Log.e(TAG, "Error");
        }
    }



    private final BroadcastReceiver broadcastReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();
            if (BluetoothDevice.ACTION_FOUND.equals(action)) {
                BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
                int rssi = intent.getShortExtra(BluetoothDevice.EXTRA_RSSI, Short.MIN_VALUE);

                // Check if this RSSI belongs to our connected device
                if (connectedDevice == null) Log.d(TAG, "onReceive: connected device null");
                if (device == null) Log.d(TAG, "onReceive: device null");
                if (connectedDevice != null) {
                    assert device != null;
                    Log.d(TAG, "device: " + device.getAddress() +" connected Device: " + connectedDevice.getAddress());
                    if (device.getAddress().equals(connectedDevice.getAddress())) {
                        try {
                            if (bluetoothAdapter.isDiscovering()) bluetoothAdapter.cancelDiscovery();
                        } catch (SecurityException e) {
                            Log.d(TAG, "onReceive: " + e.getMessage());
                        }

                        Log.d(TAG, "Connected device RSSI: " + rssi);

                        // Estimate distance (assume TxPower = -59 dBm)
                        double distance = calculateDistance(rssi, -59);
                        Log.d(TAG, "Estimated distance: " + distance + " meters");
                        textView.setText(String.valueOf(distance));


                    }
                }
            }
        }
    };


    private double calculateDistance(int rssi, int txPower) {
        int pathLossExponent = 2; // Free space
        return Math.pow(10.0, (txPower - rssi) / (10.0 * pathLossExponent));
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();

        // Unregister receiver and stop discovery
        try {
            if (bluetoothAdapter.isDiscovering()) {
                bluetoothAdapter.cancelDiscovery();
            }
            unregisterReceiver(broadcastReceiver);
        } catch (SecurityException e) {
            Log.e(TAG, "onDestroy: " + e.getMessage());
        }

    }



}